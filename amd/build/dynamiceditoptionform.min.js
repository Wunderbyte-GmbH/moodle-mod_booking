define("mod_booking/dynamiceditoptionform",["exports","core_form/dynamicform"],(function(_exports,_dynamicform){var obj;
/*
   * @package    mod_booking
   * @author     Georg Maißer
   * @copyright  Wunderbyte GmbH <info@wunderbyte.at>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
/**
   * Dynamic edit option form.
   *
   * @module     mod_booking/dynamiceditoptionform
   * @copyright  2023 Wunderbyte GmbH
   * @author     Georg Maißer
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_dynamicform=(obj=_dynamicform)&&obj.__esModule?obj:{default:obj};const SELECTORS_OPTIONDATELEMENT='[name="optiondate-element"]',SELECTORS_DELETEOPTIONDATE="deleteoptiondate",SELECTORS_DELETEOPTIONDATEBUTTON='[name^="deletedate_"]',SELECTORS_PAGE='[id="page"]';function hidecheckbox(checkbox1,checkbox2,closest,conditionalCheckbox,withelse){null!==closest&&(checkbox1.checked||checkbox2.checked?withelse&&(closest.style.display=""):(conditionalCheckbox.value="",conditionalCheckbox.checked=!1,closest.style.display="none"))}function showInvalidFeedback(){const elements=document.querySelectorAll(".invalid-feedback"),nonEmptyElements=Array.from(elements).filter((element=>""!==element.textContent.trim()));console.log(nonEmptyElements);const container=document.querySelector("#editoptionsformcontainer");if(nonEmptyElements.forEach((element=>{let currentElement=element;for(;currentElement&&currentElement!==container;)currentElement=currentElement.parentElement,currentElement&&currentElement.classList.contains("collapse")&&currentElement.classList.add("show")})),nonEmptyElements.length>0){nonEmptyElements[0].scrollIntoView({behavior:"smooth",block:"center"})}}_exports.init=(cmid,id,optionid,bookingid,copyoptionid,returnurl)=>{console.log("params: ",cmid,id,optionid,bookingid,copyoptionid,returnurl);const element=document.querySelector("#editoptionsformcontainer");console.log(element);const dynamicForm=new _dynamicform.default(element,"mod_booking\\form\\option_form");console.log(dynamicForm),dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED,(e=>{e.preventDefault();const response=e.detail;response.returnurl&&response.returnurl.length>0&&(window.location.href=response.returnurl),console.log(response),dynamicForm.load(e.detail)})),dynamicForm.addEventListener(dynamicForm.events.FORM_CANCELLED,(e=>{e.preventDefault(),returnurl&&returnurl.length>0?window.location.href=returnurl:dynamicForm.load([cmid,id,optionid,bookingid,copyoptionid,returnurl])})),dynamicForm.addEventListener(dynamicForm.events.SERVER_VALIDATION_ERROR,(()=>{showInvalidFeedback(),console.log("validation error")})),dynamicForm.addEventListener(dynamicForm.events.CLIENT_VALIDATION_ERROR,(()=>{showInvalidFeedback(),console.log("validation error")}));var checkbox1=document.querySelector('[type="checkbox"][name="restrictanswerperiodopening"]'),checkbox2=document.querySelector('[type="checkbox"][name="restrictanswerperiodclosing"]'),conditionalCheckbox=document.querySelector('[type="checkbox"][name="bo_cond_booking_time_sqlfiltercheck"]');let closest=conditionalCheckbox.closest('[class^="form-group row"],[class*=" fitem"]');dynamicForm.addEventListener("change",(e=>{if(console.log(e),"optiontemplateid"==e.target.name){window.skipClientValidation=!0;let button=document.querySelector('[name="btn_changetemplate"]');dynamicForm.processNoSubmitButton(button)}"restrictanswerperiodopening"!=e.target.name&&"restrictanswerperiodclosing"!=e.target.name||hidecheckbox(checkbox1,checkbox2,closest,conditionalCheckbox,!0)})),hidecheckbox(checkbox1,checkbox2,closest,conditionalCheckbox,!1);const page=document.querySelector(SELECTORS_PAGE);page&&page.addEventListener("click",(e=>{const element=e.target;if(console.log("target",element),element.classList.contains(SELECTORS_DELETEOPTIONDATE)){const container=element.closest(SELECTORS_OPTIONDATELEMENT);if(console.log("container",container,container.querySelector(".bg-white")),container){const card=container.querySelector(".bg-white");card&&(console.log("card",card),card.classList.remove("bg-white"),card.classList.add("bg-danger"));const deletebutton=container.querySelector(SELECTORS_DELETEOPTIONDATEBUTTON);deletebutton&&(console.log("deletebutton",deletebutton),deletebutton.click())}}}));const optiondateelements=document.querySelectorAll(SELECTORS_OPTIONDATELEMENT);console.log(optiondateelements)}}));

//# sourceMappingURL=dynamiceditoptionform.min.js.map