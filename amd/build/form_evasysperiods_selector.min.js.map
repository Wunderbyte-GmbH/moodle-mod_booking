{"version":3,"file":"form_evasysperiods_selector.min.js","sources":["../src/form_evasysperiods_selector.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides the required functionality for an autocomplete element to select a user.\n *\n * @module      mod_booking_get_evasysperiods\n * @copyright   2025 Wunderbyte Gmbh <info@wunderbyte.at>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\n// import {render as renderTemplate} from \"core/templates\";\n\n/**\n * Load the list of periods matching the query and render the selector labels for them.\n *\n * @param {String} selector The selector of the auto complete element.\n * @param {String} query The query string.\n * @param {Function} callback A callback function receiving an array of results.\n * @param {Function} failure A function to call in case of failure, receiving the error message.\n */\nexport async function transport(selector, query, callback, failure) {\n  const request = {\n    methodname: \"mod_booking_get_evasysperiods\",\n    args: {\n      query: query,\n    },\n  };\n\n  try {\n    const response = await Ajax.call([request])[0];\n\n    let labels = [];\n\n    // eslint-disable-next-line no-console\n    console.log(response);\n\n    if (response.warnings.length > 0) {\n      callback(response.warnings);\n    } else {\n      response.list.forEach((period) => {\n        labels.push(\n          period.id + ' ' + period.name\n        );\n      });\n      labels = await Promise.all(labels);\n\n      response.list.forEach((entity, index) => {\n        entity.label = labels[index];\n      });\n      callback(response.list);\n    }\n  } catch (e) {\n    failure(e);\n  }\n}\n\n/**\n * Process the results for auto complete elements.\n *\n * @param {String} selector The selector of the auto complete element.\n * @param {Array} results An array or results returned by {@see transport()}.\n * @return {Array} New array of the selector options.\n */\nexport function processResults(selector, results) {\n  if (!Array.isArray(results)) {\n    return results;\n  } else {\n    return results.map((result) => ({value: result.id, label: result.label}));\n  }\n}\n"],"names":["selector","results","Array","isArray","map","result","value","id","label","query","callback","failure","request","methodname","args","response","Ajax","call","labels","console","log","warnings","length","list","forEach","period","push","name","Promise","all","entity","index","e"],"mappings":";;;;;;;8FA6E+BA,SAAUC,gBAClCC,MAAMC,QAAQF,SAGVA,QAAQG,KAAKC,UAAaC,MAAOD,OAAOE,GAAIC,MAAOH,OAAOG,UAF1DP,2CA7CqBD,SAAUS,MAAOC,SAAUC,eACnDC,QAAU,CACdC,WAAY,gCACZC,KAAM,CACJL,MAAOA,kBAKHM,eAAiBC,cAAKC,KAAK,CAACL,UAAU,OAExCM,OAAS,GAGbC,QAAQC,IAAIL,UAERA,SAASM,SAASC,OAAS,EAC7BZ,SAASK,SAASM,WAElBN,SAASQ,KAAKC,SAASC,SACrBP,OAAOQ,KACLD,OAAOlB,GAAK,IAAMkB,OAAOE,SAG7BT,aAAeU,QAAQC,IAAIX,QAE3BH,SAASQ,KAAKC,SAAQ,CAACM,OAAQC,SAC7BD,OAAOtB,MAAQU,OAAOa,UAExBrB,SAASK,SAASQ,OAEpB,MAAOS,GACPrB,QAAQqB"}