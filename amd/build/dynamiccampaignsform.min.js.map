{"version":3,"file":"dynamiccampaignsform.min.js","sources":["../src/dynamiccampaignsform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Dynamic campaigns form.\n * @module     mod_booking/dynamiccampaignsform\n * @copyright  2023 Wunderbyte GmbH <info@wunderbyte.at>\n * @author     Bernhard Fischer\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\nexport const init = (selector) => {\n\n    const element = document.querySelector(selector);\n\n    element.addEventListener('click', e => {\n\n        editCampaignsModal(e.target);\n\n    });\n};\n\n/**\n *  Function to show modal elemnt.\n * @param {HTMLElement} element\n */\nfunction editCampaignsModal(element) {\n\n    if (!element) {\n        return;\n    }\n\n    const campaignid = element.dataset.id;\n    const bookingcampaigntype = element.dataset.bookingcampaigntype;\n    const action = element.dataset.action;\n    const name = element.dataset.name;\n\n    if (!campaignid) {\n        return;\n    }\n\n    if (action == \"delete\") {\n                // eslint-disable-next-line no-console\n                console.log(\"delete\");\n        // A campaign is deleted.\n        const deleteForm = new ModalForm({\n\n            // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n            formClass: \"mod_booking\\\\form\\\\deletecampaignform\",\n            // Add as many arguments as you need, they will be passed to the form:\n            args: {id: campaignid, bookingcampaigntype: bookingcampaigntype, name: name},\n            // Pass any configuration settings to the modal dialogue, for example, the title:\n            modalConfig: {\n                title: getString('deletebookingcampaign', 'mod_booking')\n            },\n            // DOM element that should get the focus after the modal dialogue is closed:\n            returnFocus: element\n        });\n\n        // After submitting we want to reload the window to update the campaign list.\n        deleteForm.addEventListener(deleteForm.events.FORM_SUBMITTED, () => {\n            window.location.reload();\n        });\n\n        // Show the form.\n        deleteForm.show();\n\n    } else if (action == \"edit-or-new\") {\n\n        // eslint-disable-next-line no-console\n        console.log(\"editornew\");\n        // A campaign is added (campaignid == 0) or edited (campaignid > 0).\n        const modalForm = new ModalForm({\n            // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n            formClass: \"mod_booking\\\\form\\\\campaignsform\",\n            // Add as many arguments as you need, they will be passed to the form:\n            args: {id: campaignid, bookingcampaigntype: bookingcampaigntype},\n            // Pass any configuration settings to the modal dialogue, for example, the title:\n            modalConfig: {title: getString('editcampaign', 'mod_booking')},\n            // DOM element that should get the focus after the modal dialogue is closed:\n            returnFocus: element\n        });\n\n        // Listen to events if you want to execute something on form submit.\n        // Event detail will contain everything the process() function returned:\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n\n            // After adding or editing, we want to reload the window to update the campaign list.\n            window.location.reload();\n        });\n\n        // We need to add an event listener for the change of the campaign type select.\n        modalForm.addEventListener('change', (e) => {\n\n            // eslint-disable-next-line no-console\n            console.log('change detected: ', e);\n\n            if (!e.target.name) {\n                return;\n            }\n            if (e.target.name == 'bookingcampaigntype') {\n                // eslint-disable-next-line no-console\n                console.log('change in bookingcampaigntype');\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bookingcampaigntype\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n\n            if (e.target.name == 'bofieldname') {\n                // eslint-disable-next-line no-console\n                console.log('change in booking option fieldname');\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bofieldname\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n\n            if (e.target.name == 'cpfield') {\n                // eslint-disable-next-line no-console\n                console.log('change in user profile field');\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_cpfield\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n        });\n\n        // Show the form.\n        modalForm.show();\n    } else {\n        // eslint-disable-next-line no-console\n        console.log('Error in dynamiccampaignsform.js: action should be \"delete\" or \"edit-or-new\".');\n        return;\n    }\n}\n"],"names":["selector","document","querySelector","addEventListener","e","element","campaignid","dataset","id","bookingcampaigntype","action","name","console","log","deleteForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","window","location","reload","show","modalForm","target","skipClientValidation","button","processNoSubmitButton","editCampaignsModal"],"mappings":";;;;;;;8JA0BqBA,WAEDC,SAASC,cAAcF,UAE/BG,iBAAiB,SAASC,cAWVC,aAEnBA,qBAICC,WAAaD,QAAQE,QAAQC,GAC7BC,oBAAsBJ,QAAQE,QAAQE,oBACtCC,OAASL,QAAQE,QAAQG,OACzBC,KAAON,QAAQE,QAAQI,SAExBL,qBAIS,UAAVI,OAAoB,CAEZE,QAAQC,IAAI,gBAEdC,WAAa,IAAIC,mBAAU,CAG7BC,UAAW,wCAEXC,KAAM,CAACT,GAAIF,WAAYG,oBAAqBA,oBAAqBE,KAAMA,MAEvEO,YAAa,CACTC,OAAO,mBAAU,wBAAyB,gBAG9CC,YAAaf,UAIjBS,WAAWX,iBAAiBW,WAAWO,OAAOC,gBAAgB,KAC1DC,OAAOC,SAASC,YAIpBX,WAAWY,WAER,CAAA,GAAc,eAAVhB,mBA8DPE,QAAQC,IAAI,iFA9DoB,CAGhCD,QAAQC,IAAI,mBAENc,UAAY,IAAIZ,mBAAU,CAE5BC,UAAW,mCAEXC,KAAM,CAACT,GAAIF,WAAYG,oBAAqBA,qBAE5CS,YAAa,CAACC,OAAO,mBAAU,eAAgB,gBAE/CC,YAAaf,UAKjBsB,UAAUxB,iBAAiBwB,UAAUN,OAAOC,gBAAgB,KAGxDC,OAAOC,SAASC,YAIpBE,UAAUxB,iBAAiB,UAAWC,OAGlCQ,QAAQC,IAAI,oBAAqBT,GAE5BA,EAAEwB,OAAOjB,SAGO,uBAAjBP,EAAEwB,OAAOjB,KAA+B,CAExCC,QAAQC,IAAI,iCACZU,OAAOM,sBAAuB,MAC1BC,OAAS7B,SAASC,cAAc,oCACpCyB,UAAUI,sBAAsBD,WAGf,eAAjB1B,EAAEwB,OAAOjB,KAAuB,CAEhCC,QAAQC,IAAI,sCACZU,OAAOM,sBAAuB,MAC1BC,OAAS7B,SAASC,cAAc,4BACpCyB,UAAUI,sBAAsBD,WAGf,WAAjB1B,EAAEwB,OAAOjB,KAAmB,CAE5BC,QAAQC,IAAI,gCACZU,OAAOM,sBAAuB,MAC1BC,OAAS7B,SAASC,cAAc,wBACpCyB,UAAUI,sBAAsBD,aAKxCH,UAAUD,SA7GVM,CAAmB5B,EAAEwB"}