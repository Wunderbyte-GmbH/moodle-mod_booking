{"version":3,"file":"dynamicactionsform.min.js","sources":["../src/dynamicactionsform.js"],"sourcesContent":["/* eslint-disable promise/always-return */\n/* eslint-disable promise/catch-or-return */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    mod_booking\n * @author     Bernhard Fischer\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Dynamic semesters form.\n *\n * @module     mod_booking/dynamicactionsform\n * @copyright  2023 Wunderbyte GmbH\n * @author     Georg MaiÃŸer\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\nexport const init = (selector) => {\n\n    const element = document.querySelector(selector);\n\n    element.addEventListener('click', e => {\n\n        editActionsModal(e.target);\n\n    });\n};\n\n/**\n *  Function to show modal elemnt.\n * @param {HTMLElement} element\n */\nfunction editActionsModal(element) {\n\n    if (!element) {\n        return;\n    }\n\n    const actionid = element.dataset.id;\n    const name = element.dataset.name;\n    const action = element.dataset.action;\n\n    if (!actionid) {\n        return;\n    }\n\n    if (action == \"delete\") {\n        // A action is deleted.\n        const deleteForm = new ModalForm({\n\n            // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n            formClass: \"mod_booking\\\\form\\\\editactionsform\",\n            // Add as many arguments as you need, they will be passed to the form:\n            args: {id: actionid, name: name},\n            // Pass any configuration settings to the modal dialogue, for example, the title:\n            modalConfig: {\n                title: getString('deletebookingaction', 'mod_booking')\n            },\n            // DOM element that should get the focus after the modal dialogue is closed:\n            returnFocus: element\n        });\n\n        // After submitting we want to reload the window to update the action list.\n        deleteForm.addEventListener(deleteForm.events.FORM_SUBMITTED, () => {\n            window.location.reload();\n        });\n\n        // Show the form.\n        deleteForm.show();\n\n    } else if (action == \"edit-or-new\") {\n        // A action is added (actionid == 0) or edited (actionid > 0).\n        const modalForm = new ModalForm({\n            // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n            formClass: \"mod_booking\\\\form\\\\actions\\\\actionsform\",\n            // Add as many arguments as you need, they will be passed to the form:\n            args: {id: actionid},\n            // Pass any configuration settings to the modal dialogue, for example, the title:\n            modalConfig: {title: getString('editaction', 'mod_booking')},\n            // DOM element that should get the focus after the modal dialogue is closed:\n            returnFocus: element\n        });\n\n        // Listen to events if you want to execute something on form submit.\n        // Event detail will contain everything the process() function returned:\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n\n            // After adding or editing, we want to reload the window to update the action list.\n            window.location.reload();\n        });\n\n        // We need to add an event listener for the change of the action, action, and condition select.\n        modalForm.addEventListener('change', (e) => {\n            if (!e.target.name) {\n                return;\n            }\n\n            if (e.target.name == 'bookingactiontype') {\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bookingactiontype\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n\n            if (e.target.name == 'action_react_on_event_event') {\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bookingactiontype\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n\n            if (e.target.name == 'bookingactionconditiontype') {\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bookingactionconditiontype\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n\n            if (e.target.name == 'bookingactionactiontype') {\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bookingactionactiontype\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n        });\n\n        // Show the form.\n        modalForm.show();\n    } else {\n        // eslint-disable-next-line no-console\n        console.log('Error in dynamicactionsform.js: action should be \"delete\" or \"edit-or-new\".');\n        return;\n    }\n}\n"],"names":["selector","document","querySelector","addEventListener","e","element","actionid","dataset","id","name","action","deleteForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","window","location","reload","show","console","log","modalForm","target","skipClientValidation","button","processNoSubmitButton","editActionsModal"],"mappings":";;;;;;;;;;;;;;8JAoCqBA,WAEDC,SAASC,cAAcF,UAE/BG,iBAAiB,SAASC,cAWZC,aAEjBA,qBAICC,SAAWD,QAAQE,QAAQC,GAC3BC,KAAOJ,QAAQE,QAAQE,KACvBC,OAASL,QAAQE,QAAQG,WAE1BJ,mBAIS,UAAVI,OAAoB,OAEdC,WAAa,IAAIC,mBAAU,CAG7BC,UAAW,qCAEXC,KAAM,CAACN,GAAIF,SAAUG,KAAMA,MAE3BM,YAAa,CACTC,OAAO,mBAAU,sBAAuB,gBAG5CC,YAAaZ,UAIjBM,WAAWR,iBAAiBQ,WAAWO,OAAOC,gBAAgB,KAC1DC,OAAOC,SAASC,YAIpBX,WAAWY,WAER,CAAA,GAAc,eAAVb,mBAwDPc,QAAQC,IAAI,+EAxDoB,OAE1BC,UAAY,IAAId,mBAAU,CAE5BC,UAAW,0CAEXC,KAAM,CAACN,GAAIF,UAEXS,YAAa,CAACC,OAAO,mBAAU,aAAc,gBAE7CC,YAAaZ,UAKjBqB,UAAUvB,iBAAiBuB,UAAUR,OAAOC,gBAAgB,KAGxDC,OAAOC,SAASC,YAIpBI,UAAUvB,iBAAiB,UAAWC,OAC7BA,EAAEuB,OAAOlB,SAIO,qBAAjBL,EAAEuB,OAAOlB,KAA6B,CACtCW,OAAOQ,sBAAuB,MAC1BC,OAAS5B,SAASC,cAAc,kCACpCwB,UAAUI,sBAAsBD,WAGf,+BAAjBzB,EAAEuB,OAAOlB,KAAuC,CAChDW,OAAOQ,sBAAuB,MAC1BC,OAAS5B,SAASC,cAAc,kCACpCwB,UAAUI,sBAAsBD,WAGf,8BAAjBzB,EAAEuB,OAAOlB,KAAsC,CAC/CW,OAAOQ,sBAAuB,MAC1BC,OAAS5B,SAASC,cAAc,2CACpCwB,UAAUI,sBAAsBD,WAGf,2BAAjBzB,EAAEuB,OAAOlB,KAAmC,CAC5CW,OAAOQ,sBAAuB,MAC1BC,OAAS5B,SAASC,cAAc,wCACpCwB,UAAUI,sBAAsBD,aAKxCH,UAAUH,SApGVQ,CAAiB3B,EAAEuB"}