{"version":3,"file":"dynamicrulesform.min.js","sources":["../src/dynamicrulesform.js"],"sourcesContent":["/* eslint-disable promise/always-return */\n/* eslint-disable promise/catch-or-return */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    mod_booking\n * @author     Bernhard Fischer\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Dynamic semesters form.\n *\n * @module     mod_booking/dynamicsemestersform\n * @copyright  2022 Wunderbyte GmbH\n * @author     Georg MaiÃŸer\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\nexport const init = (selector) => {\n\n    const element = document.querySelector(selector);\n\n    element.addEventListener('click', e => {\n\n        // eslint-disable-next-line no-console\n        console.log(e.target);\n\n        editRulesModal(e.target);\n\n    });\n};\n\n/**\n *  Function to show modal elemnt.\n * @param {HTMLElement} element\n */\nfunction editRulesModal(element) {\n\n    // eslint-disable-next-line no-console\n    console.log('editRulesModal', element);\n\n    if (!element) {\n        return;\n    }\n\n    const ruleid = element.dataset.id;\n    const name = element.dataset.name;\n    const action = element.dataset.action;\n\n    if (!ruleid) {\n        return;\n    }\n\n    if (action == \"delete\") {\n        // A rule is deleted.\n        const deleteForm = new ModalForm({\n\n            // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n            formClass: \"mod_booking\\\\form\\\\deleteruleform\",\n            // Add as many arguments as you need, they will be passed to the form:\n            args: {id: ruleid, name: name},\n            // Pass any configuration settings to the modal dialogue, for example, the title:\n            modalConfig: {\n                title: getString('deletebookingrule', 'mod_booking')\n            },\n            // DOM element that should get the focus after the modal dialogue is closed:\n            returnFocus: element\n        });\n\n        // After submitting we want to reload the window to update the rule list.\n        deleteForm.addEventListener(deleteForm.events.FORM_SUBMITTED, () => {\n            window.location.reload();\n        });\n\n        // Show the form.\n        deleteForm.show();\n\n    } else if (action == \"edit-or-new\") {\n        // A rule is added (ruleid == 0) or edited (ruleid > 0).\n        const modalForm = new ModalForm({\n            // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n            formClass: \"mod_booking\\\\form\\\\rulesform\",\n            // Add as many arguments as you need, they will be passed to the form:\n            args: {id: ruleid},\n            // Pass any configuration settings to the modal dialogue, for example, the title:\n            modalConfig: {title: getString('editrule', 'mod_booking')},\n            // DOM element that should get the focus after the modal dialogue is closed:\n            returnFocus: element\n        });\n\n        // Listen to events if you want to execute something on form submit.\n        // Event detail will contain everything the process() function returned:\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n            const response = e.detail;\n            // eslint-disable-next-line no-console\n            console.log('confirmCancelAndSetCreditModal response: ', response);\n\n            // After adding or editing, we want to reload the window to update the rule list.\n            window.location.reload();\n        });\n\n        // We need to add an event listener for the change of the rule, action, and condition select.\n        modalForm.addEventListener('change', (e) => {\n            if (!e.target.name) {\n                return;\n            }\n\n            // eslint-disable-next-line no-console\n            console.log(e.target.name);\n\n            if (e.target.name == 'bookingruletype') {\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bookingruletype\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n\n            if (e.target.name == 'rule_react_on_event_event') {\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bookingruletype\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n\n            if (e.target.name == 'bookingruleconditiontype') {\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bookingruleconditiontype\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n\n            if (e.target.name == 'bookingruleactiontype') {\n                window.skipClientValidation = true;\n                let button = document.querySelector('[name=\"btn_bookingruleactiontype\"]');\n                modalForm.processNoSubmitButton(button);\n            }\n        });\n\n        // Show the form.\n        modalForm.show();\n    } else {\n        // eslint-disable-next-line no-console\n        console.log('Error in dynamicrulesform.js: action should be \"delete\" or \"edit-or-new\".');\n        return;\n    }\n}\n"],"names":["selector","document","querySelector","addEventListener","e","console","log","target","element","ruleid","dataset","id","name","action","deleteForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","window","location","reload","show","modalForm","response","detail","skipClientValidation","button","processNoSubmitButton","editRulesModal"],"mappings":";;;;;;;;;;;;;;8JAoCoB,SAACA,UAEDC,SAASC,cAAcF,UAE/BG,iBAAiB,SAAS,SAAAC,GAG9BC,QAAQC,IAAIF,EAAEG,iBAWEC,YAGpBH,QAAQC,IAAI,iBAAkBE,UAEzBA,mBAICC,OAASD,QAAQE,QAAQC,GACzBC,KAAOJ,QAAQE,QAAQE,KACvBC,OAASL,QAAQE,QAAQG,WAE1BJ,iBAIS,UAAVI,OAAoB,KAEdC,WAAa,IAAIC,mBAAU,CAG7BC,UAAW,oCAEXC,KAAM,CAACN,GAAIF,OAAQG,KAAMA,MAEzBM,YAAa,CACTC,OAAO,mBAAU,oBAAqB,gBAG1CC,YAAaZ,UAIjBM,WAAWX,iBAAiBW,WAAWO,OAAOC,gBAAgB,WAC1DC,OAAOC,SAASC,YAIpBX,WAAWY,WAER,CAAA,GAAc,eAAVb,mBA8DPR,QAAQC,IAAI,iFA5DNqB,UAAY,IAAIZ,mBAAU,CAE5BC,UAAW,+BAEXC,KAAM,CAACN,GAAIF,QAEXS,YAAa,CAACC,OAAO,mBAAU,WAAY,gBAE3CC,YAAaZ,UAKjBmB,UAAUxB,iBAAiBwB,UAAUN,OAAOC,gBAAgB,SAAClB,OACnDwB,SAAWxB,EAAEyB,OAEnBxB,QAAQC,IAAI,4CAA6CsB,UAGzDL,OAAOC,SAASC,YAIpBE,UAAUxB,iBAAiB,UAAU,SAACC,MAC7BA,EAAEG,OAAOK,SAKdP,QAAQC,IAAIF,EAAEG,OAAOK,MAEA,mBAAjBR,EAAEG,OAAOK,KAA2B,CACpCW,OAAOO,sBAAuB,MAC1BC,OAAS9B,SAASC,cAAc,gCACpCyB,UAAUK,sBAAsBD,WAGf,6BAAjB3B,EAAEG,OAAOK,KAAqC,CAC9CW,OAAOO,sBAAuB,MAC1BC,QAAS9B,SAASC,cAAc,gCACpCyB,UAAUK,sBAAsBD,YAGf,4BAAjB3B,EAAEG,OAAOK,KAAoC,CAC7CW,OAAOO,sBAAuB,MAC1BC,SAAS9B,SAASC,cAAc,yCACpCyB,UAAUK,sBAAsBD,aAGf,yBAAjB3B,EAAEG,OAAOK,KAAiC,CAC1CW,OAAOO,sBAAuB,MAC1BC,SAAS9B,SAASC,cAAc,sCACpCyB,UAAUK,sBAAsBD,eAKxCJ,UAAUD,QA7GVO,CAAe7B,EAAEG"}