{"version":3,"file":"confirm_cancel.min.js","sources":["../src/confirm_cancel.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AJAX helper for the inline editing a value.\n *\n * This script is automatically included from template core/inplace_editable\n * It registers a click-listener on [data-inplaceeditablelink] link (the \"inplace edit\" icon),\n * then replaces the displayed value with an input field. On \"Enter\" it sends a request\n * to web service core_update_inplace_editable, which invokes the specified callback.\n * Any exception thrown by the web service (or callback) is displayed as an error popup.\n *\n * @module     mod_booking/confirm_cancel\n * @copyright  2022 Georg MaiÃŸer\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.3\n */\n\n// import Notification from 'core/notification';\n import ModalForm from 'core_form/modalform';\n\n import {\n    get_string as getString\n        }\n        from 'core/str';\n\n/**\n * @param {int} optionid\n * @param {int} status\n */\nexport const init = (optionid, status) => {\n\n    confirmCancelModal(optionid, status);\n};\n\n/**\n *\n * @param {int} optionid\n * @param {int} status\n */\nfunction confirmCancelModal(optionid, status) {\n\n    // eslint-disable-next-line no-console\n    console.log('confirmCancelModal', 'optionid: ' + optionid, 'status: ' + status);\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"mod_booking\\\\form\\\\modal_confirmcancel\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            'optionid': optionid,\n            'area': 'option',\n            'status': status},\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {\n            title: getString('confirmcanceloptiontitle', 'mod_booking'),\n            saveButtonText: \"mein text\",\n        },\n        // DOM element that should get the focus after the modal dialogue is closed:\n        // returnFocus: element\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n        // eslint-disable-next-line no-console\n        console.log('confirmCancelModal response: ', response);\n\n        location.reload();\n\n    });\n\n    // Show the form.\n    modalForm.show();\n\n}"],"names":["optionid","status","console","log","modalForm","ModalForm","formClass","args","modalConfig","title","saveButtonText","addEventListener","events","FORM_SUBMITTED","e","response","detail","location","reload","show","confirmCancelModal"],"mappings":";;;;;;;;;;;;;;8JA0CoB,SAACA,SAAUC,kBAUHD,SAAUC,QAGlCC,QAAQC,IAAI,qBAAsB,aAAeH,SAAU,WAAaC,YAElEG,UAAY,IAAIC,mBAAU,CAG5BC,UAAW,yCAEXC,KAAM,UACUP,cACJ,gBACEC,QAEdO,YAAa,CACTC,OAAO,mBAAU,2BAA4B,eAC7CC,eAAgB,eAOxBN,UAAUO,iBAAiBP,UAAUQ,OAAOC,gBAAgB,SAACC,OACnDC,SAAWD,EAAEE,OAEnBd,QAAQC,IAAI,gCAAiCY,UAE7CE,SAASC,YAKbd,UAAUe,OA1CVC,CAAmBpB,SAAUC"}